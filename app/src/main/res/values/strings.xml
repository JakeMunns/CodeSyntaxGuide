<?xml version="1.0" encoding="utf-8"?>
<resources>

    <string name="app_name">Code Syntax Guide</string>

    <string name="else_if_csharp">if("condition 1")\n{\n\t"statement 1";\n}\nelse if("condition 2")\n{\n\t"statement 2";\n}\nelse\n{\n\t"statement 3";\n}</string>
    <string name="else_if_cplusplus">\nif("condition 1")\n{\n\t"statement 1";\n}\nelse if("condition 2")\n{\n\t"statement 2";\n}\nelse\n{\n\t"statement 3";\n}</string>
    <string name="else_if_python">if "condition 1":\n\t "statement 1" \nelif "condition 2":\n\t "statement 2"\nelse:\n\t "statement 3"</string>
    <string name="else_if_java">if("condition 1"){\n\t"statement 1";\n}else if("condition 2"){\n\t"statement 2";\n}else{\n\t"statement 3";\n}</string>
    <string name="types_cplusplus">\nchar - A single byte of data representing a character
                                   \nint - 32 bit integer
                                   \nfloat - 4 byte floating point number
                                   \ndouble - 8 byte floating point number
                                   \nbool - A binary true/false value
                                   \nvoid - A null value\n</string>
    <string name="types_csharp">\nchar - A single byte of data representing a character
                                \nint - 32 bit integer
                                \nfloat - 4 byte floating point number
                                \ndouble - 8 byte floating point number
                                \nbool - binary true/false value
                                \nvoid - null value\n</string>
    <string name="types_python">\nPython doesn\'t require you to define variable types\n</string>
    <string name="types_java">\nchar - A single byte of data representing a character
                              \nint - 32 bit integer
                              \nfloat - 4 byte floating point number
                              \ndouble - 8 byte floating point number
                              \nbool - binary true/false value
                              \nvoid - null value\n</string>
    <string name="classes_cplusplus">\nclass name_of_class\n{\n\tprivate:\n\t\t"content only viewable from this class"\n\tprotected:\n\t\t"content only viewable from this type of class"\n\tpublic:\n\t\t"content viewable to anything accessing the class"\n} object_of_class\n</string>
    <string name="classes_csharp">\nclass name_of_class\n{\n\t"content of the class"\n\t"privacy is declared at the start of each member"\n}\n</string>
    <string name="classes_python">\nclass name_of_class:\n\t"content of the class"\n</string>
    <string name="classes_java">\nclass name_of_class {\n\t"content of the class"\n\t"privacy is declared at the start of each member"\n}\n</string>
    <string name="activity_include">\nThe main purpose behind the include directive is that it allows libraries of code to be developed which help to ensure that
                                    everyone uses the same version of a data layout definition or procedural code throughout a program.\n\nFor example in C/C++ we use
                                    :\n#include &lt;stdio.h>" // This includes the content of the standard header \'stdio.h\'.\n\nWithin PHP the include directive causes another
                                    PHP file to be included and evaluated.\n\nModern languages such as Java and C# do not use forward declarations, instead identifiers are recognised
                                    automatically from source files and read directly form dynamic library symbols, meaning header files are not needed."</string>

    <string name="operators_csharp" formatted="false">
                                    \n = - Using a single equals assigns a value
                                    \n == - Using two equals in succession tests values for equality
                                    \n != - Tests values for inequality
                                    \n * - Multiplication
                                    \n / - Division
                                    \n % - The modulus returns the remainder of a division
                                    \n + - Addition
                                    \n - - Subtraction
                                    \n &amp; - Logical AND
                                    \n ^ - Logical XOR
                                    \n | - Logical OR
                                    \n &amp;&amp; - Conditional AND
                                    \n || - Conditional OR
                                    \n ! - Conditional NOT
                                    \n ++ - Increment variable by 1
                                    \n –– - Decrement variable by 1
                                    \n += - Increment variable by n
                                    \n *= - Multiply variable by n
                                    \n -= - Subtract n from a variable
                                    \n > - Greater than
                                    \n &lt; - Less than
                                    \n >= - Greater than or equal to
                                    \n &lt;= - Less than or equal to\n</string>

    <string name="operators_cplusplus" formatted="false">
                                       \n + - Addition
                                       \n - - Subtraction
                                       \n * - Multiplication
                                       \n / - Division
                                       \n % - The modulus returns the remainder of a division
                                       \n ++ - Increment variable by 1
                                       \n –– - Decrement variable by 1
                                       \n == - Using two equals in succession tests values for equality
                                       \n != - Tests values for inequality
                                       \n > - Greater than
                                       \n &lt; - Less than
                                       \n >= - Greater than or equal to
                                       \n &lt;= - Less than or equal to
                                       \n &amp;&amp; - Conditional AND
                                       \n || - Conditional OR
                                       \n ! - Conditional NOT
                                       \n &amp; - Binary AND Operator copies a bit to the result if it exists in both operands
                                       \n ^ - Binary XOR Operator copies the bit if it is set in one operand but not both
                                       \n | - Binary AND Operator copies a bit to the result if it exists in both operands
                                       \n ~ - Binary Ones Complement Operator is unary and has the effect of \'flipping\' bits
                                       \n &lt;&lt; - Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand
                                       \n >> - Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand
                                       \n = - Using a single equals assigns a value
                                       \n += - Increment variable by n
                                       \n *= - Multiply variable by n
                                       \n -= - Subtract n from a variable
                                       \n /= - Divides n with a variable
                                       \n &lt;&lt;= - Left shift AND
                                       \n >>= - Right shift AND
                                       \n &amp;= - Bitwise AND
                                       \n ^= = Bitwise exclusive OR
                                       \n |= = Bitwise inclusive OR\n</string>

    <string name="operators_python" formatted="false">
                                    \n + - Addition
                                    \n - - Subtraction
                                    \n * - Multiplication
                                    \n / - Division
                                    \n ** - Exponent - Performs exponential (power) calculation on operators
                                    \n // - Floor Division - The division of operands where the result is the quotient in which the digits after the decimal point are removed
                                    \n == - Using two equals in succession tests values for equality
                                    \n != - Tests values for inequality
                                    \n &lt;> - Checks if the value of two operands are equal or not, if values are not equal then condition becomes true
                                    \n >= - Greater than or equal to
                                    \n &lt;= - Less than or equal to
                                    \n > - Greater than
                                    \n &lt; - Less than
                                    \n = - Using a single equals assigns a value
                                    \n += - Increment variable by n
                                    \n *= - Multiply variable by n
                                    \n -= - Subtract n from a variable
                                    \n /= - Divides n with a variable
                                    \n %= - Takes the modulus using two operands and assign the result to left operand
                                    \n **= - Performs exponential (power) calculation on operators and assign value to the left operand
                                    \n //= - Performs floor division on operators and assign value to the left operand
                                    \n &amp; - Binary AND Operator copies a bit to the result if it exists in both operands
                                    \n | - Binary OR Operator copies a bit if it exists in either operand
                                    \n ^ - Binary XOR Operator copies the bit if it is set in one operand but not both
                                    \n ~ - Binary Ones Complement Operator is unary and has the effect of \'flipping\' bits
                                    \n &lt;&lt; - Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand
                                    \n >> - Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand
                                    \n and - Logical AND
                                    \n or - Logical OR
                                    \n not - Logical NOT
                                    \n in - Evaluates to true if it finds a variable in the specified sequence and false otherwise
                                    \n not in - Evaluates to true if it does not finds a variable in the specified sequence and false otherwise
                                    \n is - Evaluates to true if the variables on either side of the operator point to the same object and false otherwise
                                    \n in not - Evaluates to false if the variables on either side of the operator point to the same object and true otherwise\n</string>

    <string name="operators_java" formatted="false">
                                  \n + - Addition
                                  \n - - Subtraction
                                  \n * - Multiplication
                                  \n / - Division
                                  \n % - The modulus returns the remainder of a division
                                  \n ++ - Increment variable by 1
                                  \n –– - Decrement variable by 1
                                  \n == - Using two equals in succession tests values for equality
                                  \n != - Tests values for inequality
                                  \n > - Greater than
                                  \n &lt; - Less than
                                  \n >= - Greater than or equal to
                                  \n &lt;= - Less than or equal to
                                  \n &amp; - Binary AND Operator copies a bit to the result if it exists in both operands
                                  \n | - Binary OR Operator copies a bit if it exists in either operand
                                  \n ^ - Binary XOR Operator copies the bit if it is set in one operand but not both
                                  \n ~ - Binary Ones Complement Operator is unary and has the effect of \'flipping\' bits
                                  \n &lt;&lt; - Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand
                                  \n >> - Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand
                                  \n >>> - Shift right zero fill operator. The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros
                                  \n &amp;&amp; - Logical AND operator. If both the operands are non-zero, then the condition becomes true
                                  \n || - Logical OR operator. If any of the two operands are non-zero, then the condition becomes true
                                  \n ! - Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will be false
                                  \n = - Using a single equals assigns a value
                                  \n += - Increment variable by n
                                  \n *= - Multiply variable by n
                                  \n -= - Subtract n from a variable
                                  \n /= - Divides n with a variable
                                  \n %= - Takes the modulus using two operands and assign the result to left operand
                                  \n &lt;&lt;= - Left shift AND
                                  \n >>= - Right shift AND
                                  \n &amp;= - Bitwise AND
                                  \n ^= = Bitwise exclusive OR
                                  \n |= = Bitwise inclusive OR\n</string>
    <string name="while_cplusplus">\nwhile(condition)\n{\n\tstatement(s);\n}\n</string>
    <string name="while_csharp">\nwhile(condition)\n{\n\tstatement(s);\n}\n</string>
    <string name="while_python">\nwhile expression:\n\tstatement(s)\n</string>
    <string name="while_java">\nwhile(expression)\n{\n\tstatement(s)\n}\n</string>
    <string name="switch_cplusplus">\nswitch(expression)\n{\n\tcase a:\n\t\tstatements1;\n\t\tbreak;\n\tcaseb:\n\t\tstatements2;\n\t\tbreak;\n}\n</string>
    <string name="switch_csharp">\nswitch(expression){\n\tcase expression:\n\t\tstatements(s);\n\t\tbreak; *this is optional*\n\tcase expression:\n\t\tstatement(s);\n\t\tbreak; *this is optional*\n}\n</string>
    <string name="switch_python">\nPython has no definitive switch-case statement. A simple substitute for this is using a string of if-else blocks, with each condition being what would have been the matching case.\n</string>
    <string name="switch_java">\nswitch(expression){\n\tcase expression:\n\t\tstatements(s);\n\t\tbreak; *this is optional*\n\tcase expression:\n\t\tstatement(s);\n\t\tbreak; *this is optional*\n}\n</string>

    <string name="variables_csharp">Variables are declared type first, then name.\n
                values can be assigned on declaration or afterwards.\n\n"
                int x;\n
                x =10\n\n
                Multiple variables can be defined on a single line\n\n
                int x, y, z;\n\n</string>
    <string name="variables_cplusplus">Variables declared same way as C#.\n
                Must be declared at the start of application after headers are declared\n\n
                int x;\n
                x = 10;\n\n</string>
    <string name="variables_python">Python uses Names, they are not typed,
                although all objects referred to by them are\n\n
                a = 1\n\n</string>
    <string name="variable_java">Variables are declared the same way as C#\n
                int x;\n
                x = 10;\n\n
                Several variables at once\n\n
                int x,y,z;\n\n</string>

    <string name="libraries_cplusplus"></string>
    <string name="libraries_csharp"></string>
    <string name="libraries_python"></string>
    <string name="libraries_java"></string>

    <color name="white">#FFFFFF</color>
    <color name="black">#000000</color>
    <color name="green">#397D02</color>
    <color name="blue">#39B7CD</color>
    <color name="red">#B0171F</color>

    <string name="action_settings">Settings</string>
    <string name="title_activity_if">IF</string>
    <string name="title_activity_elseif">ELSEIF</string>
    <string name="title_activity_while"><b>WHILE\n</b></string>
    <string name="title_activity_dowhile">DOWHILE</string>
    <string name="title_activity_switch">SWITCH</string>
    <string name="title_activity_types">TYPES\n</string>
    <string name="title_activity_printing">PRINTING</string>
    <string name="title_activity_operators"><b>OPERATORS\n</b></string>
    <string name="title_activity_classes">CLASSES</string>
    <string name="title_activity_namespaces">NAMESPACES</string>
    <string name="title_activity_include">INCLUDE</string>
    <string name="title_activity_pointers">POINTERS</string>
    <string name="title_language_python">PYTHON</string>
    <string name="title_language_csharp">C#</string>
    <string name="title_language_cplusplus">C++</string>
    <string name="title_language_java">JAVA</string>
    <string name="title_activity_splash">SPLASH</string>
    <string name="title_activity_libraries">LIBRARIES</string>
    <string name="title_activity_variables">VARIABLES</string>

</resources>
